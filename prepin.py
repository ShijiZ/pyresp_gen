#!/bin/python
# -*- coding: utf-8 -*- 

import numpy as np
import pandas as pd
from constant import *
from zmatrix import getXYZ, distMatrix, getINFO, getBOND,getCONN
from zmatrix import getEQU, getCH2CH3,getSymIdx
from zmatrix import dumpSymIdx
import datetime


def dumpin1(espdat,outfile,\
				ptype='perm',dtype='pgm',\
				nmol=1,charge=0,\
				qwt=0.0005,pwt=0.0005,\
				exc12=0,exc13=0,\
				depth=3,verbose=1,strategy=2):
	# specify the output file name and notes in the input file
	#ifile = espdat.split('/')[-1].split('.')[0]+'.1st'
	note = espdat.split('/')[-1].split('.')[0]
	# extracting 
	#	- xyz: getXYZ
	#	- natoms, ngrids: getINFO
	#	- dismatrix: distMatrix            
	xyzs = getXYZ(espdat)
	info = getINFO(espdat)
	distmap = distMatrix(xyzs)
	Nbond = getBOND(xyzs)
	connect,conAtm,conIdx = getCONN(xyzs)
	#print(distmap)

	equAtmMap = getEQU(connect,xyzs,depth=depth)
	idx_ch2, idx_ch3 = getCH2CH3(conIdx, xyzs)
	sym_hvy, sym_ch2, sym_ch3,sym_hxx = getSymIdx(equAtmMap, xyzs, idx_ch2, idx_ch3, connect)
	in1_idx, in2_idx,in1_idx_dipole, in2_idx_dipole = dumpSymIdx(sym_hvy, sym_ch2, sym_ch3,sym_hxx, idx_ch2, idx_ch3, xyzs,connect,ptype,strategy)
	
	if verbose:
		print('#{:60s}#'.format('-'*60))
		print('#{:60s}#'.format('Output Info. for PyRESP_Gen'))
		print('#{:60s}#'.format('-'*60))
		print('Date Time:',end='')
		print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
		print('{:50s}'.format('Distance Map in the unit of angstrom (A)'))
		print(distmap)
		print('{:30s}'.format('Equivalent Atom Map:'))
		print(' + {:3d} denotes equil'.format(1))
		print(' + {:3d} denotes not equil'.format(0))
		print(equAtmMap)
		print('#{:60s}#'.format('-'*60))
		print('Detailed Info. derived from the *Distance Map*:')
		print('{:5s} \t {:5s} ({:5s})'.format('Idx. Center','Idx. Bonded','Atm. Type Bonded'))
		for k,v in connect.items():
			print('{:5d} '.format(k),end='')
			for idx, atm in zip(v,conAtm[k]):
				print('{:5d} ({:>5s})'.format(idx,atm),end='')
			print('',end='\n')
		#------------------#
		# Info. for -CH2-  #
		#------------------#
		print('Detailed Info. for -CH2-:')
		if len(idx_ch2) ==0:
			print('    NO -CH2- FRAGMENT WAS DETECTED *PLEASE CHECK STRUCTURE*')
		else:
			print('    Index for Carbon was listed below:')
			for x in idx_ch2:
				print('     o {:4d}'.format(x),end='\n')

		#------------------#
		# Info. for -CH3   #
		#------------------#
		print('Detailed Info. for -CH3:')
		if len(idx_ch3) ==0:
			print('NO -CH3 FRAGMENT WAS DETECTED *PLEASE CHECK STRUCTURE*')
		else:
			print('     Index for Carbon was listed below:')
			for x in idx_ch3:
				print('     o {:4d}'.format(x),end='\n')
		
		print('Equivalent HEAVY atom index:')
		if len(sym_hvy) ==0:
			print('    NO EQUIVALENT HEAVY ATOM WAS DETECTED!')
		else:
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for hvy in sym_hvy:
				print('{:5d} {:5d}'.format(hvy[0],hvy[1]),end='\n')

		print('Equivalent HYDROGEN atom index for -CH2-:')
		if len(sym_ch2) == 0:
			print('    NO -CH2- FRAGMENT WAS DETECTED!')
		else:
			print('EQUIVALENT HYDROGEN INDEX (-CH2-):')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ch2 in sym_ch2:
				print('{:5d} {:5d}'.format(h_ch2[0],h_ch2[1]),end='\n')
	
		print('Equivalent HYDROGEN atom index for -CH3-:')
		if len(sym_ch3) == 0:
			print('    NO -CH3 FRAGMENT WAS DETECTED!')
		else:
			print('EQUIVALENT HYDROGEN INDEX (-CH3):')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ch3 in sym_ch3:
				print('{:5d} {:5d}'.format(h_ch3[0],h_ch3[1]),end='\n')

		print('Equivalent HYDROGEN atom index exclude -CH2- and -CH3')
		if len(sym_hxx) ==0:
			print('    NO EQUIVALENT HYDROGEN WAS DETECTED!')
		else:
			print('EQUILVALENT HYDROGEN INDEX (EXCLUDING -CH2-, -CH3)')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ in sym_hxx:
				print('{:5d} {:5d}'.format(h_[0],h_[1]),end='\n')

		if ptype=='perm' or ptype=='perm-v':
			print('1st STAGE BOND EQUIVALENT INFO')
			print('{:5s} \t {:5s}'.format('Idx. Center','Idx. Bond'))
			for k,in1_d in in1_idx_dipole.items():
				print('{:5d} '.format(k),end='')
				for idx in in1_d:
					print('{:5d}'.format(idx),end='')
				print('',end='\n')
			#print(in1_idx_dipole)
			print('2nd STAGE BOND EQUIVALENT INFO')
			print('{:5s} \t {:5s}'.format('Idx. Center','Idx. Bond'))
			for k,in2_d in in2_idx_dipole.items():
				print('{:5d} '.format(k),end='')
				for idx in in2_d:
					print('{:5d}'.format(idx),end='')
				print('',end='\n')
			#print(in2_idx_dipole)

		print('#{}{}{}#'.format('-'*30,'END','-'*30))

	with open(outfile,'w') as f:
		#***********************#
		# ------ 1st line ------#
		#***********************#
		f.write('*{:10s}*\n'.format('Generated by PyRESP GEN v1.0 1st'))
		#***********************#
		# ------ 2nd line ------#
		#***********************$
		# --- common command ----#
		f.write('{:10s}\n'.format('&cntrl'))
		# specify the number of structure in a multiple structure,
		# here, nmol is set to be default value: 1
		f.write('{:<10s} \t= {:>6d},\n'.format('nmol',nmol))
		# For the 1st stage charge fitting,
		# parameter iqopt all set to be 1 means reset all initial charges (and permanent dipoles) to zero!
		f.write('{:<10s} \t= {:>6d},\n'.format('iqopt',1))
		# For the 1st stage, hydrogens are all not restrained
		f.write('{:<10s} \t= {:>6d},\n'.format('ihfree',1))
		# For the 1st stage, restraint weight for charges set to be 0.0005
		f.write('{:<10s} \t= {:>6.5f},\n'.format('qwt',qwt))
		# For the 1st stage, write restart info of new esp to -s unit
		f.write('{:<10s} \t= {:>6d},\n'.format('ioutopt',1))
				
		if ptype=='chg':
			f.write('{:<10s} \t= {:>6d},\n'.format('ipol',0))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',0))
		elif ptype=='ind':
			if dtype=='1': # applequist
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',1))
			elif dtype=='2': # tinker
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',2))
			elif dtype=='3': # exponential
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',3))
			elif dtype=='4': # linear
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',4))
			else: # pgm
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',5))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',0))
			f.write('{:<10s} \t= {:>6d},\n'.format('igdm',1))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc12',exc12))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc13',exc13))
		elif ptype == 'perm':
			if dtype=='1': # applequist
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',1))
			elif dtype=='2': # tinker
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',2))
			elif dtype=='3': # exponential
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',3))
			elif dtype=='4': # linear
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',4))
			else: # pgm
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',5))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',1))
			f.write('{:<10s} \t= {:>6.5f},\n'.format('pwt',pwt))
			f.write('{:<10s} \t= {:>6d},\n'.format('igdm',1))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc12',exc12))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc13',exc13))
			f.write('{:<10s} \t= {:>6d},\n'.format('virtual',0))
		#elif ptype == 'perm-v':
		#	f.write('{:<10s} \t= {:>6d},\n'.format('virtual',1))
		else:
			print('**{:10s}**'.format('TYPE IS NOT RECOGNIZED BY PROGRAM'))
			print('**{:10s}**'.format('ONLY ACCEPT FOLLOWING TYPES:'))
			print('x chg')
			print('x ind')
			print('x perm')
			#print('x perm-v')
			f.write('*ERROR*: {:10s}\n'.format('TYPE IS NOT RECOGNIZED'))
			return None
		f.write('{:10s}\n'.format('&end'))
		# ------ end of 2nd line ---#
		#***********************#
		# ------ 3rd line ------#
		#***********************#
		# relative weight for the structure if multiple structure fit (1.0 otherwise)
		f.write(' {:4.1f}\n'.format(1.0))
		#***********************#
		# ------ 4th line ------#
		#***********************#
		# subtitle for the structure (take the prefix of ESP dat file here)
		f.write('{:20s}\n'.format(note))
		#*******************************#
		# ------ 5th and 6th line ------#
		#*******************************#
		# x charge: total charge value for this structure, specified by user | ARG: charge
		# x iuniq: total number of atoms, extracted from ESP dat
		# x iuniq_p: total number of permanent dipoles for this structures, derived from ESP dat through the distMatrix
		if ptype == 'chg' or ptype == 'ind':
			f.write('{:2d} \t {:3d}\n'.format(charge,info['natoms'])) # charge is specified by user
			for ida,v in zip(xyzs['ida'].values,in1_idx):
				f.write('{:2d} \t {:3d}\n'.format(ida,int(v)))
		elif ptype == 'perm':
			f.write('{:4d} \t {:4d}\t {:4d}\n'.format(charge,info['natoms'],Nbond*2)) # charge is specified by user
			# dump charge equivalent info.
			idx_ = 0
			for ida,v in zip(xyzs['ida'].values,in1_idx):
				f.write('{:4d} {:4d}'.format(ida,int(v)))
				# dump permanent dipole equivalent info.
				for x in in1_idx_dipole[idx_]:
					f.write('{:4d}'.format(int(x)))
				f.write('\n')
				idx_ +=1
				

		f.write('\n')
			

def dumpin2(espdat,outfile,\
				ptype='perm',dtype='pgm',\
				nmol=1,charge=0,\
				qwt=0.001,pwt=0.0005,\
				exc12=0,exc13=0,\
				depth=3,verbose=0,strategy=2):
	# specify the output file name and notes in the input file
	#ifile = espdat.split('/')[-1].split('.')[0]+'.1st'
	note = espdat.split('/')[-1].split('.')[0]
	# extracting 
	#	- xyz: getXYZ
	#	- natoms, ngrids: getINFO
	#	- dismatrix: distMatrix            
	xyzs = getXYZ(espdat)
	info = getINFO(espdat)
	distmap = distMatrix(xyzs)
	Nbond = getBOND(xyzs)
	connect,conAtm,conIdx = getCONN(xyzs)
	#print(distmap)

	equAtmMap = getEQU(connect,xyzs,depth=depth)
	idx_ch2, idx_ch3 = getCH2CH3(conIdx, xyzs)
	sym_hvy, sym_ch2, sym_ch3, sym_hxx = getSymIdx(equAtmMap, xyzs, idx_ch2, idx_ch3, connect)
	in1_idx, in2_idx, in1_idx_dipole, in2_idx_dipole = dumpSymIdx(sym_hvy, sym_ch2, sym_ch3, sym_hxx, idx_ch2, idx_ch3, xyzs,connect,ptype,strategy)


	if verbose:
		print('#{:60s}#'.format('-'*60))
		print('#{:60s}#'.format('Output Info. for PyRESP_Gen'))
		print('#{:60s}#'.format('-'*60))
		print('Date Time:',end='')
		print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
		print('{:50s}'.format('Distance Map in the unit of angstrom (A)'))
		print(distmap)
		print('{:30s}'.format('Equivalent Atom Map:'))
		print(' + {:3d} denotes equil'.format(1))
		print(' + {:3d} denotes not equil'.format(0))
		print(equAtmMap)
		print('#{:60s}#'.format('-'*60))
		print('Detailed Info. derived from the *Distance Map*:')
		print('{:5s} \t {:5s} ({:5s})'.format('Idx. Center','Idx. Bonded','Atm. Type Bonded'))
		for k,v in connect.items():
			print('{:5d} '.format(k),end='')
			for idx, atm in zip(v,conAtm[k]):
				print('{:5d} ({:>5s})'.format(idx,atm),end='')
			print('',end='\n')
		#------------------#
		# Info. for -CH2-  #
		#------------------#
		print('Detailed Info. for -CH2-:')
		if len(idx_ch2) ==0:
			print('    NO -CH2- FRAGMENT WAS DETECTED *PLEASE CHECK STRUCTURE*')
		else:
			print('    Index for Carbon was listed below:')
			for x in idx_ch2:
				print('     o {:4d}'.format(x),end='\n')

		#------------------#
		# Info. for -CH3   #
		#------------------#
		print('Detailed Info. for -CH3:')
		if len(idx_ch3) ==0:
			print('NO -CH3 FRAGMENT WAS DETECTED *PLEASE CHECK STRUCTURE*')
		else:
			print('     Index for Carbon was listed below:')
			for x in idx_ch3:
				print('     o {:4d}'.format(x),end='\n')
		
		print('Equivalent HEAVY atom index:')
		if len(sym_hvy) ==0:
			print('    NO EQUIVALENT HEAVY ATOM WAS DETECTED!')
		else:
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for hvy in sym_hvy:
				print('{:5d} {:5d}'.format(hvy[0],hvy[1]),end='\n')

		print('Equivalent HYDROGEN atom index for -CH2-:')
		if len(sym_ch2) == 0:
			print('    NO -CH2- FRAGMENT WAS DETECTED!')
		else:
			print('EQUIVALENT HYDROGEN INDEX (-CH2-):')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ch2 in sym_ch2:
				print('{:5d} {:5d}'.format(h_ch2[0],h_ch2[1]),end='\n')
	
		print('Equivalent HYDROGEN atom index for -CH3-:')
		if len(sym_ch3) == 0:
			print('    NO -CH3 FRAGMENT WAS DETECTED!')
		else:
			print('EQUIVALENT HYDROGEN INDEX (-CH3):')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ch3 in sym_ch3:
				print('{:5d} {:5d}'.format(h_ch3[0],h_ch3[1]),end='\n')

		print('Equivalent HYDROGEN atom index exclude -CH2- and -CH3')
		if len(sym_hxx) ==0:
			print('    NO EQUIVALENT HYDROGEN WAS DETECTED!')
		else:
			print('EQUILVALENT HYDROGEN INDEX (EXCLUDING -CH2-, -CH3)')
			print('{:>5s} \t {:>5s}'.format('Idx.','Idx.'))
			for h_ in sym_hxx:
				print('{:5d} {:5d}'.format(h_[0],h_[1]),end='\n')

		print('#{}{}{}#'.format('-'*30,'END','-'*30))
	
	with open(outfile,'w') as f:
		#***********************#
		# ------ 1st line ------#
		#***********************#
		f.write('*{:10s}*\n'.format('Generated by PyRESP GEN v1.0 2nd'))
		#***********************#
		# ------ 2nd line ------#
		#***********************$
		# --- common command ----#
		f.write('{:10s}\n'.format('&cntrl'))
		# specify the number of structure in a multiple structure,
		# here, nmol is set to be default value: 1
		f.write('{:<10s} \t= {:>6d},\n'.format('nmol',nmol))
		# For the 2nd stage charge fitting,
		# parameter iqopt all set to be 2 means read in new initial charges from -q arg!
		f.write('{:<10s} \t= {:>6d},\n'.format('iqopt',2))
		# For the 1st stage, hydrogens are all not restrained
		f.write('{:<10s} \t= {:>6d},\n'.format('ihfree',1))
		# For the 2nd stage, restraint weight for charges set to be 0.001 (st: strong restraint)
		# 			see J. Am. Chem. Soc. (1993) 115, 21
		f.write('{:<10s} \t= {:>6.5f},\n'.format('qwt',qwt))
		# For the 1st stage, write restart info of new esp to -s unit
		f.write('{:<10s} \t= {:>6d},\n'.format('ioutopt',1))
		
		if ptype=='chg':
			f.write('{:<10s} \t= {:>6d},\n'.format('ipol',0))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',0))
		elif ptype=='ind':
			if dtype=='1': # applequist
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',1))
			elif dtype=='2': # tinker
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',2))
			elif dtype=='3': # exponential
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',3))
			elif dtype=='4': # linear
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',4))
			else: # pgm
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',5))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',0))
			f.write('{:<10s} \t= {:>6d},\n'.format('igdm',1))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc12',exc12))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc13',exc13))
		elif ptype == 'perm':
			if dtype=='1': # applequist
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',1))
			elif dtype=='2': # tinker
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',2))
			elif dtype=='3': # exponential
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',3))
			elif dtype=='4': # linear
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',4))
			else: # pgm
				f.write('{:<10s} \t= {:>6d},\n'.format('ipol',5))
			f.write('{:<10s} \t= {:>6d},\n'.format('ipermdip',1))
			f.write('{:<10s} \t= {:>6.5f},\n'.format('pwt',pwt))
			f.write('{:<10s} \t= {:>6d},\n'.format('igdm',1))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc12',exc12))
			f.write('{:<10s} \t= {:>6d},\n'.format('exc13',exc13))
			f.write('{:<10s} \t= {:>6d},\n'.format('virtual',0))
		#elif ptype == 'perm-v':
		#	f.write('{:<10s} \t= {:>6d},\n'.format('virtual',1))
		else:
			print('**{:10s}**'.format('TYPE IS NOT RECOGNIZED BY PROGRAM'))
			print('**{:10s}**'.format('ONLY ACCEPT FOLLOWING TYPES:'))
			print('x chg')
			print('x ind')
			print('x perm')
			#print('x perm-v')
			f.write('*ERROR*: {:10s}\n'.format('TYPE IS NOT RECOGNIZED'))
			return None
		f.write('{:10s}\n'.format('&end'))
		# ------ end of 2nd line ---#
		#***********************#
		# ------ 3rd line ------#
		#***********************#
		# relative weight for the structure if multiple structure fit (1.0 otherwise)
		f.write(' {:4.1f}\n'.format(1.0))
		#***********************#
		# ------ 4th line ------#
		#***********************#
		# subtitle for the structure (take the prefix of ESP dat file here)
		f.write('{:20s}\n'.format(note))
		#*******************************#
		# ------ 5th and 6th line ------#
		#*******************************#
		# x charge: total charge value for this structure, specified by user | ARG: charge
		# x iuniq: total number of atoms, extracted from ESP dat
		# x iuniq_p: total number of permanent dipoles for this structures, derived from ESP dat through the distMatrix
		if ptype == 'chg' or ptype == 'ind':
			f.write('{:2d} \t {:3d}\n'.format(charge,info['natoms'])) # charge is specified by user
			for ida,v in zip(xyzs['ida'].values,in2_idx):
				f.write('{:2d} \t {:3d}\n'.format(ida,int(v)))
		elif ptype == 'perm':
			f.write('{:4d} \t {:4d}\t {:4d}\n'.format(charge,info['natoms'],Nbond*2)) # charge is specified by user
			# dump charge equivalent info. here
			idx_ = 0
			for ida,v in zip(xyzs['ida'].values,in2_idx):
				f.write('{:4d} {:4d}'.format(ida,int(v)))
				#dump permanent dipole equivalent info. here
				for x in in2_idx_dipole[idx_]:
					f.write('{:4d}'.format(int(x)))
				f.write('\n')
				idx_+=1
				

		f.write('\n')



if __name__ == '__main__':
	#espdat = '../C2H6_b3lyp_321g_esp.dat'
	#espdat = '../CH3S2CH3_b3lyp_321g_esp.dat'
	espdat = 'esp.dat'
	dumpin1(espdat,'test.1st',ptype='chg',dtype='additive')
	dumpin2(espdat,'test.2nd',ptype='chg',dtype='additive')
